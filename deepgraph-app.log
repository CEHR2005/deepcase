
> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

[32mready[39m - started server on 0.0.0.0:3007, url: http://localhost:3007
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /
[36mwait[39m  - compiling...
[31merror[39m - [36m./pages/index.tsx[39m:[33m3[39m:[33m0[39m
[31m[1mModule not found[22m[39m: Can't resolve '[32m@deepcase/deepgraph/imports/react-token[39m'
[0m [90m 1 | [39m[36mimport[39m [33mReact[39m[33m,[39m { useEffect[33m,[39m useMemo[33m,[39m useState } [36mfrom[39m [32m'react'[39m[33m;[39m[0m
[0m [90m 2 | [39m[36mimport[39m [33mHead[39m [36mfrom[39m [32m'next/head'[39m[33m;[39m[0m
[0m[31m[1m>[22m[39m[90m 3 | [39m[36mimport[39m { [33mTokenProvider[39m[33m,[39m useTokenController } [36mfrom[39m [32m'@deepcase/deepgraph/imports/react-token'[39m[33m;[39m[0m
[0m [90m 4 | [39m[36mimport[39m { [33mApolloClientTokenizedProvider[39m } [36mfrom[39m [32m'@deepcase/react-hasura/apollo-client-tokenized-provider'[39m[33m;[39m[0m
[0m [90m 5 | [39m[36mimport[39m { [33mLocalStoreProvider[39m } [36mfrom[39m [32m'@deepcase/store/local'[39m[33m;[39m[0m
[0m [90m 6 | [39m[36mimport[39m { generateQuery[33m,[39m generateSerial } [36mfrom[39m [32m'@deepcase/deepgraph/imports/gql'[39m[33m;[39m[0m
[35mevent[39m - build page: /next/dist/pages/_error
[36mwait[39m  - compiling...
[31merror[39m - [36m./pages/index.tsx[39m:[33m3[39m:[33m0[39m
[31m[1mModule not found[22m[39m: Can't resolve '[32m@deepcase/deepgraph/imports/react-token[39m'
[0m [90m 1 | [39m[36mimport[39m [33mReact[39m[33m,[39m { useEffect[33m,[39m useMemo[33m,[39m useState } [36mfrom[39m [32m'react'[39m[33m;[39m[0m
[0m [90m 2 | [39m[36mimport[39m [33mHead[39m [36mfrom[39m [32m'next/head'[39m[33m;[39m[0m
[0m[31m[1m>[22m[39m[90m 3 | [39m[36mimport[39m { [33mTokenProvider[39m[33m,[39m useTokenController } [36mfrom[39m [32m'@deepcase/deepgraph/imports/react-token'[39m[33m;[39m[0m
[0m [90m 4 | [39m[36mimport[39m { [33mApolloClientTokenizedProvider[39m } [36mfrom[39m [32m'@deepcase/react-hasura/apollo-client-tokenized-provider'[39m[33m;[39m[0m
[0m [90m 5 | [39m[36mimport[39m { [33mLocalStoreProvider[39m } [36mfrom[39m [32m'@deepcase/store/local'[39m[33m;[39m[0m
[0m [90m 6 | [39m[36mimport[39m { generateQuery[33m,[39m generateSerial } [36mfrom[39m [32m'@deepcase/deepgraph/imports/gql'[39m[33m;[39m[0m
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /
[36mwait[39m  - compiling...
[31merror[39m - [36m./pages/index.tsx[39m:[33m3[39m:[33m0[39m
[31m[1mModule not found[22m[39m: Can't resolve '[32m@deepcase/deepgraph/imports/react-token[39m'
[0m [90m 1 | [39m[36mimport[39m [33mReact[39m[33m,[39m { useEffect[33m,[39m useMemo[33m,[39m useState } [36mfrom[39m [32m'react'[39m[33m;[39m[0m
[0m [90m 2 | [39m[36mimport[39m [33mHead[39m [36mfrom[39m [32m'next/head'[39m[33m;[39m[0m
[0m[31m[1m>[22m[39m[90m 3 | [39m[36mimport[39m { [33mTokenProvider[39m[33m,[39m useTokenController } [36mfrom[39m [32m'@deepcase/deepgraph/imports/react-token'[39m[33m;[39m[0m
[0m [90m 4 | [39m[36mimport[39m { [33mApolloClientTokenizedProvider[39m } [36mfrom[39m [32m'@deepcase/react-hasura/apollo-client-tokenized-provider'[39m[33m;[39m[0m
[0m [90m 5 | [39m[36mimport[39m { [33mLocalStoreProvider[39m } [36mfrom[39m [32m'@deepcase/store/local'[39m[33m;[39m[0m
[0m [90m 6 | [39m[36mimport[39m { generateQuery[33m,[39m generateSerial } [36mfrom[39m [32m'@deepcase/deepgraph/imports/gql'[39m[33m;[39m[0m
[35mevent[39m - build page: /next/dist/pages/_error
[36mwait[39m  - compiling...
[31merror[39m - [36m./pages/index.tsx[39m:[33m3[39m:[33m0[39m
[31m[1mModule not found[22m[39m: Can't resolve '[32m@deepcase/deepgraph/imports/react-token[39m'
[0m [90m 1 | [39m[36mimport[39m [33mReact[39m[33m,[39m { useEffect[33m,[39m useMemo[33m,[39m useState } [36mfrom[39m [32m'react'[39m[33m;[39m[0m
[0m [90m 2 | [39m[36mimport[39m [33mHead[39m [36mfrom[39m [32m'next/head'[39m[33m;[39m[0m
[0m[31m[1m>[22m[39m[90m 3 | [39m[36mimport[39m { [33mTokenProvider[39m[33m,[39m useTokenController } [36mfrom[39m [32m'@deepcase/deepgraph/imports/react-token'[39m[33m;[39m[0m
[0m [90m 4 | [39m[36mimport[39m { [33mApolloClientTokenizedProvider[39m } [36mfrom[39m [32m'@deepcase/react-hasura/apollo-client-tokenized-provider'[39m[33m;[39m[0m
[0m [90m 5 | [39m[36mimport[39m { [33mLocalStoreProvider[39m } [36mfrom[39m [32m'@deepcase/store/local'[39m[33m;[39m[0m
[0m [90m 6 | [39m[36mimport[39m { generateQuery[33m,[39m generateSerial } [36mfrom[39m [32m'@deepcase/deepgraph/imports/gql'[39m[33m;[39m[0m
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
{ token: [32m''[39m }
[35mevent[39m - build page: /next/dist/pages/_error
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
{ token: [32m''[39m }

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

[32mready[39m - started server on 0.0.0.0:3007, url: http://localhost:3007
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /next/dist/pages/_error
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
{ token: [32m''[39m }
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[31merror[39m - [36m./pages/index.tsx[39m:[33m121[39m:[33m11[39m
[31m[1mSyntax error[22m[39m: Unexpected token, expected "..."

[0m [90m 119 | [39m    [33m/[39m[33m>[39m[0m
[0m [90m 120 | [39m    [33m<[39m[33mPopover[39m[0m
[0m[31m[1m>[22m[39m[90m 121 | [39m      open{[36mtrue[39m}[0m
[0m [90m     | [39m           [31m[1m^[22m[39m[0m
[0m [90m 122 | [39m      anchorReference[33m=[39m[32m"anchorPosition"[39m[0m
[0m [90m 123 | [39m      anchorPosition[33m=[39m{{ top[33m:[39m [35m200[39m[33m,[39m left[33m:[39m [35m400[39m }}[0m
[0m [90m 124 | [39m      anchorOrigin[33m=[39m{{[0m
[36mwait[39m  - compiling...
[35mevent[39m - build page: /next/dist/pages/_error
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

[32mready[39m - started server on 0.0.0.0:3007, url: http://localhost:3007
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
{ token: [32m''[39m }
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
{ token: [32m''[39m }
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[31merror[39m - [36m./pages/index.tsx[39m:[33m115[39m:[33m6[39m
[31m[1mSyntax error[22m[39m: Invalid left-hand side in assignment expression

[0m [90m 113 | [39m    style[33m=[39m{{ position[33m:[39m [32m'absolute'[39m[33m,[39m top[33m:[39m [35m0[39m[33m,[39m left[33m:[39m [35m0[39m[33m,[39m width[33m:[39m [32m'100%'[39m[33m,[39m height[33m:[39m [32m'100%'[39m }}[0m
[0m [90m 114 | [39m    onMouseMove[33m=[39m{(e) [33m=>[39m {[0m
[0m[31m[1m>[22m[39m[90m 115 | [39m      mouseMove[33m?[39m[33m.[39mcurrent [33m=[39m { clientX[33m:[39m e[33m.[39mclientX[33m,[39m clientY[33m:[39m e[33m.[39mclientY }[33m;[39m[0m
[0m [90m     | [39m      [31m[1m^[22m[39m[0m
[0m [90m 116 | [39m    }}[0m
[0m [90m 117 | [39m  [33m>[39m[0m
[0m [90m 118 | [39m    [33m<[39m[33mdiv[39m className[33m=[39m{classes[33m.[39moverlay}[33m>[39m[0m
[36mwait[39m  - compiling...
[31merror[39m - [36m./pages/index.tsx[39m:[33m115[39m:[33m6[39m
[31m[1mSyntax error[22m[39m: Invalid left-hand side in assignment expression

[0m [90m 113 | [39m    style[33m=[39m{{ position[33m:[39m [32m'absolute'[39m[33m,[39m top[33m:[39m [35m0[39m[33m,[39m left[33m:[39m [35m0[39m[33m,[39m width[33m:[39m [32m'100%'[39m[33m,[39m height[33m:[39m [32m'100%'[39m }}[0m
[0m [90m 114 | [39m    onMouseMove[33m=[39m{(e) [33m=>[39m {[0m
[0m[31m[1m>[22m[39m[90m 115 | [39m      mouseMove[33m?[39m[33m.[39mcurrent [33m=[39m { clientX[33m:[39m e[33m.[39mclientX[33m,[39m clientY[33m:[39m e[33m.[39mclientY }[33m;[39m[0m
[0m [90m     | [39m      [31m[1m^[22m[39m[0m
[0m [90m 116 | [39m    }}[0m
[0m [90m 117 | [39m  [33m>[39m[0m
[0m [90m 118 | [39m    [33m<[39m[33mdiv[39m className[33m=[39m{classes[33m.[39moverlay}[33m>[39m[0m
[36mwait[39m  - compiling...
[31merror[39m - [36m./pages/index.tsx[39m:[33m115[39m:[33m6[39m
[31m[1mSyntax error[22m[39m: Invalid left-hand side in assignment expression

[0m [90m 113 | [39m    style[33m=[39m{{ position[33m:[39m [32m'absolute'[39m[33m,[39m top[33m:[39m [35m0[39m[33m,[39m left[33m:[39m [35m0[39m[33m,[39m width[33m:[39m [32m'100%'[39m[33m,[39m height[33m:[39m [32m'100%'[39m }}[0m
[0m [90m 114 | [39m    onMouseMove[33m=[39m{(e) [33m=>[39m {[0m
[0m[31m[1m>[22m[39m[90m 115 | [39m      mouseMove[33m?[39m[33m.[39mcurrent [33m=[39m { clientX[33m:[39m e[33m.[39mclientX[33m,[39m clientY[33m:[39m e[33m.[39mclientY }[33m;[39m[0m
[0m [90m     | [39m      [31m[1m^[22m[39m[0m
[0m [90m 116 | [39m    }}[0m
[0m [90m 117 | [39m  [33m>[39m[0m
[0m [90m 118 | [39m    [33m<[39m[33mdiv[39m className[33m=[39m{classes[33m.[39moverlay}[33m>[39m[0m
[35mevent[39m - build page: /next/dist/pages/_error
[36mwait[39m  - compiling...
[31merror[39m - [36m./pages/index.tsx[39m:[33m115[39m:[33m6[39m
[31m[1mSyntax error[22m[39m: Invalid left-hand side in assignment expression

[0m [90m 113 | [39m    style[33m=[39m{{ position[33m:[39m [32m'absolute'[39m[33m,[39m top[33m:[39m [35m0[39m[33m,[39m left[33m:[39m [35m0[39m[33m,[39m width[33m:[39m [32m'100%'[39m[33m,[39m height[33m:[39m [32m'100%'[39m }}[0m
[0m [90m 114 | [39m    onMouseMove[33m=[39m{(e) [33m=>[39m {[0m
[0m[31m[1m>[22m[39m[90m 115 | [39m      mouseMove[33m?[39m[33m.[39mcurrent [33m=[39m { clientX[33m:[39m e[33m.[39mclientX[33m,[39m clientY[33m:[39m e[33m.[39mclientY }[33m;[39m[0m
[0m [90m     | [39m      [31m[1m^[22m[39m[0m
[0m [90m 116 | [39m    }}[0m
[0m [90m 117 | [39m  [33m>[39m[0m
[0m [90m 118 | [39m    [33m<[39m[33mdiv[39m className[33m=[39m{classes[33m.[39moverlay}[33m>[39m[0m
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
{ token: [32m''[39m }
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

[32mready[39m - started server on 0.0.0.0:3007, url: http://localhost:3007
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[31merror[39m - [36m./pages/index.tsx[39m:[33m150[39m:[33m49[39m
[31m[1mSyntax error[22m[39m: Unexpected token, expected "}"

[0m [90m 148 | [39m                [33m<[39m[33mButton[39m[33m>[39m[33m<[39m[33mAdd[39m[33m/[39m[33m>[39m[33m<[39m[33m/[39m[33mButton[39m[33m>[39m[0m
[0m [90m 149 | [39m                [33m<[39m[33mButton[39m[0m
[0m[31m[1m>[22m[39m[90m 150 | [39m                  color[33m=[39m{insertingField [33m===[39m [32m'fro'[39m) [33m?[39m [32m'primary'[39m [33m:[39m [32m'default'[39m}[0m
[0m [90m     | [39m                                                 [31m[1m^[22m[39m[0m
[0m [90m 151 | [39m                  onClick[33m=[39m{() [33m=>[39m setInsertingField([32m'from'[39m)}[0m
[0m [90m 152 | [39m                [33m>[39m[0m
[0m [90m 153 | [39m                  from[33m:[39m {inserting[33m?[39m[33m.[39mfrom}[0m
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

[32mready[39m - started server on 0.0.0.0:3007, url: http://localhost:3007
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

Port 3007 is already in use.
[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcode[0m 1
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mpath[0m /workspace/deepcase/packages/deepgraph-app
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m command failed
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcommand[0m sh -c next dev -p $PORT
[0m
[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m A complete log of this run can be found in:
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m     /home/gitpod/.npm/_logs/2021-05-20T07_03_37_388Z-debug.log
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcode[0m 1
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mpath[0m /workspace/deepcase/packages/deepgraph-app
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m command failed
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcommand[0m sh -c npm run unsafe-dev
[0m
[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m A complete log of this run can be found in:
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m     /home/gitpod/.npm/_logs/2021-05-20T07_03_37_423Z-debug.log
[0m{ token: [32m''[39m }

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

Port 3007 is already in use.
[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcode[0m 1
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mpath[0m /workspace/deepcase/packages/deepgraph-app
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m command failed
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcommand[0m sh -c next dev -p $PORT
[0m
[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m A complete log of this run can be found in:
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m     /home/gitpod/.npm/_logs/2021-05-20T07_12_49_235Z-debug.log
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcode[0m 1
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mpath[0m /workspace/deepcase/packages/deepgraph-app
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m command failed
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcommand[0m sh -c npm run unsafe-dev
[0m
[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m A complete log of this run can be found in:
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m     /home/gitpod/.npm/_logs/2021-05-20T07_12_49_258Z-debug.log
[0m{ token: [32m''[39m }
{ token: [32m''[39m }
{ token: [32m''[39m }

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

Port 3007 is already in use.
[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcode[0m 1
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mpath[0m /workspace/deepcase/packages/deepgraph-app
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m command failed
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcommand[0m sh -c next dev -p $PORT
[0m
[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m A complete log of this run can be found in:
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m     /home/gitpod/.npm/_logs/2021-05-20T07_31_14_019Z-debug.log
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcode[0m 1
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mpath[0m /workspace/deepcase/packages/deepgraph-app
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m command failed
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcommand[0m sh -c npm run unsafe-dev
[0m
[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m A complete log of this run can be found in:
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m     /home/gitpod/.npm/_logs/2021-05-20T07_31_14_058Z-debug.log
[0m{ token: [32m''[39m }
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
{ token: [32m''[39m }
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[31merror[39m - [36m./pages/index.tsx[39m:[33m9[39m:[33m0[39m
[31m[1mModule not found[22m[39m: Can't resolve '[32m@deepcase/react-hasura/use-apollo-client[39m'
[0m [90m  7 | [39m[36mimport[39m { [33mQueryStoreProvider[39m[33m,[39m useQueryStore } [36mfrom[39m [32m'@deepcase/store/query'[39m[33m;[39m[0m
[0m [90m  8 | [39m[36mimport[39m { generateQuery[33m,[39m generateSerial } [36mfrom[39m [32m'@deepcase/deepgraph/imports/gql'[39m[33m;[39m[0m
[0m[31m[1m>[22m[39m[90m  9 | [39m[36mimport[39m { useApolloClient } [36mfrom[39m [32m'@deepcase/react-hasura/use-apollo-client'[39m[33m;[39m[0m
[0m [90m 10 | [39m[36mimport[39m [33mReactResizeDetector[39m [36mfrom[39m [32m'react-resize-detector'[39m[33m;[39m[0m
[0m [90m 11 | [39m[36mimport[39m { useSubscription[33m,[39m useMutation } [36mfrom[39m [32m'@apollo/react-hooks'[39m[33m;[39m[0m
[0m [90m 12 | [39m[36mimport[39m { [33mForceGraph[39m[33m,[39m [33mForceGraph2D[39m } [36mfrom[39m [32m'../imports/graph'[39m[33m;[39m[0m
[35mevent[39m - build page: /next/dist/pages/_error
[36mwait[39m  - compiling...
[31merror[39m - [36m./pages/index.tsx[39m:[33m9[39m:[33m0[39m
[31m[1mModule not found[22m[39m: Can't resolve '[32m@deepcase/react-hasura/use-apollo-client[39m'
[0m [90m  7 | [39m[36mimport[39m { [33mQueryStoreProvider[39m[33m,[39m useQueryStore } [36mfrom[39m [32m'@deepcase/store/query'[39m[33m;[39m[0m
[0m [90m  8 | [39m[36mimport[39m { generateQuery[33m,[39m generateSerial } [36mfrom[39m [32m'@deepcase/deepgraph/imports/gql'[39m[33m;[39m[0m
[0m[31m[1m>[22m[39m[90m  9 | [39m[36mimport[39m { useApolloClient } [36mfrom[39m [32m'@deepcase/react-hasura/use-apollo-client'[39m[33m;[39m[0m
[0m [90m 10 | [39m[36mimport[39m [33mReactResizeDetector[39m [36mfrom[39m [32m'react-resize-detector'[39m[33m;[39m[0m
[0m [90m 11 | [39m[36mimport[39m { useSubscription[33m,[39m useMutation } [36mfrom[39m [32m'@apollo/react-hooks'[39m[33m;[39m[0m
[0m [90m 12 | [39m[36mimport[39m { [33mForceGraph[39m[33m,[39m [33mForceGraph2D[39m } [36mfrom[39m [32m'../imports/graph'[39m[33m;[39m[0m
[31merror[39m - [36m./pages/index.tsx[39m:[33m9[39m:[33m0[39m
[31m[1mModule not found[22m[39m: Can't resolve '[32m@deepcase/react-hasura/use-apollo-client[39m'
[0m [90m  7 | [39m[36mimport[39m { [33mQueryStoreProvider[39m[33m,[39m useQueryStore } [36mfrom[39m [32m'@deepcase/store/query'[39m[33m;[39m[0m
[0m [90m  8 | [39m[36mimport[39m { generateQuery[33m,[39m generateSerial } [36mfrom[39m [32m'@deepcase/deepgraph/imports/gql'[39m[33m;[39m[0m
[0m[31m[1m>[22m[39m[90m  9 | [39m[36mimport[39m { useApolloClient } [36mfrom[39m [32m'@deepcase/react-hasura/use-apollo-client'[39m[33m;[39m[0m
[0m [90m 10 | [39m[36mimport[39m [33mReactResizeDetector[39m [36mfrom[39m [32m'react-resize-detector'[39m[33m;[39m[0m
[0m [90m 11 | [39m[36mimport[39m { useSubscription[33m,[39m useMutation } [36mfrom[39m [32m'@apollo/react-hooks'[39m[33m;[39m[0m
[0m [90m 12 | [39m[36mimport[39m { [33mForceGraph[39m[33m,[39m [33mForceGraph2D[39m } [36mfrom[39m [32m'../imports/graph'[39m[33m;[39m[0m
[35mevent[39m - build page: /next/dist/pages/_error
[36mwait[39m  - compiling...
[31merror[39m - [36m./pages/index.tsx[39m:[33m9[39m:[33m0[39m
[31m[1mModule not found[22m[39m: Can't resolve '[32m@deepcase/react-hasura/use-apollo-client[39m'
[0m [90m  7 | [39m[36mimport[39m { [33mQueryStoreProvider[39m[33m,[39m useQueryStore } [36mfrom[39m [32m'@deepcase/store/query'[39m[33m;[39m[0m
[0m [90m  8 | [39m[36mimport[39m { generateQuery[33m,[39m generateSerial } [36mfrom[39m [32m'@deepcase/deepgraph/imports/gql'[39m[33m;[39m[0m
[0m[31m[1m>[22m[39m[90m  9 | [39m[36mimport[39m { useApolloClient } [36mfrom[39m [32m'@deepcase/react-hasura/use-apollo-client'[39m[33m;[39m[0m
[0m [90m 10 | [39m[36mimport[39m [33mReactResizeDetector[39m [36mfrom[39m [32m'react-resize-detector'[39m[33m;[39m[0m
[0m [90m 11 | [39m[36mimport[39m { useSubscription[33m,[39m useMutation } [36mfrom[39m [32m'@apollo/react-hooks'[39m[33m;[39m[0m
[0m [90m 12 | [39m[36mimport[39m { [33mForceGraph[39m[33m,[39m [33mForceGraph2D[39m } [36mfrom[39m [32m'../imports/graph'[39m[33m;[39m[0m
[31merror[39m - [36m./pages/index.tsx[39m:[33m9[39m:[33m0[39m
[31m[1mModule not found[22m[39m: Can't resolve '[32m@deepcase/react-hasura/use-apollo-client[39m'
[0m [90m  7 | [39m[36mimport[39m { [33mQueryStoreProvider[39m[33m,[39m useQueryStore } [36mfrom[39m [32m'@deepcase/store/query'[39m[33m;[39m[0m
[0m [90m  8 | [39m[36mimport[39m { generateQuery[33m,[39m generateSerial } [36mfrom[39m [32m'@deepcase/deepgraph/imports/gql'[39m[33m;[39m[0m
[0m[31m[1m>[22m[39m[90m  9 | [39m[36mimport[39m { useApolloClient } [36mfrom[39m [32m'@deepcase/react-hasura/use-apollo-client'[39m[33m;[39m[0m
[0m [90m 10 | [39m[36mimport[39m [33mReactResizeDetector[39m [36mfrom[39m [32m'react-resize-detector'[39m[33m;[39m[0m
[0m [90m 11 | [39m[36mimport[39m { useSubscription[33m,[39m useMutation } [36mfrom[39m [32m'@apollo/react-hooks'[39m[33m;[39m[0m
[0m [90m 12 | [39m[36mimport[39m { [33mForceGraph[39m[33m,[39m [33mForceGraph2D[39m } [36mfrom[39m [32m'../imports/graph'[39m[33m;[39m[0m
[35mevent[39m - build page: /next/dist/pages/_error
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
{ token: [32m''[39m }
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'all'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'all'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.13'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  }
}
{ token: [32m''[39m }
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'all'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'all'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.13'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  }
}

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

[32mready[39m - started server on 0.0.0.0:3007, url: http://localhost:3007
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /next/dist/pages/_error
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

[32mready[39m - started server on 0.0.0.0:3007, url: http://localhost:3007
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /next/dist/pages/_error
[36mwait[39m  - compiling...
[35mevent[39m - build page: /next/dist/pages/_error
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

[32mready[39m - started server on 0.0.0.0:3007, url: http://localhost:3007
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /next/dist/pages/_error
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
memooptions {
  client: [32m'deepgraph-app'[39m,
  path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
  ssl: [33mtrue[39m,
  ws: [33mfalse[39m,
  token: [32m''[39m
}
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}
[35mevent[39m - build page: /next/dist/pages/_error
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
memooptions {
  client: [32m'deepgraph-app'[39m,
  path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
  ssl: [33mtrue[39m,
  ws: [33mfalse[39m,
  token: [32m''[39m
}
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}
memooptions {
  client: [32m'deepgraph-app'[39m,
  path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
  ssl: [33mtrue[39m,
  ws: [33mfalse[39m,
  token: [32m''[39m
}
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

[32mready[39m - started server on 0.0.0.0:3007, url: http://localhost:3007
[35mevent[39m - compiled successfully
[35m[1mAttention[22m[39m: Next.js now collects completely anonymous telemetry regarding usage.
This information is used to shape Next.js' roadmap and prioritize features.
You can learn more, including how to opt-out if you'd not like to participate in this anonymous program, by visiting the following URL:
[36mhttps://nextjs.org/telemetry[39m

[35mevent[39m - build page: /next/dist/pages/_error
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
memooptions {
  client: [32m'deepgraph-app'[39m,
  path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
  ssl: [33mtrue[39m,
  ws: [33mfalse[39m,
  token: [32m''[39m
}
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}
memooptions {
  client: [32m'deepgraph-app'[39m,
  path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
  ssl: [33mtrue[39m,
  ws: [33mfalse[39m,
  token: [32m''[39m
}
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}
memooptions {
  client: [32m'deepgraph-app'[39m,
  path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
  ssl: [33mtrue[39m,
  ws: [33mfalse[39m,
  token: [32m''[39m
}
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

Port 3007 is already in use.
[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcode[0m 1
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mpath[0m /workspace/deepcase/packages/deepgraph-app
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m command failed
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcommand[0m sh -c next dev -p $PORT
[0m
[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m A complete log of this run can be found in:
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m     /home/gitpod/.npm/_logs/2021-05-20T11_23_21_434Z-debug.log
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcode[0m 1
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mpath[0m /workspace/deepcase/packages/deepgraph-app
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m command failed
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcommand[0m sh -c npm run unsafe-dev
[0m
[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m A complete log of this run can be found in:
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m     /home/gitpod/.npm/_logs/2021-05-20T11_23_21_459Z-debug.log
[0m
> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

[32mready[39m - started server on 0.0.0.0:3007, url: http://localhost:3007
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /
[36mwait[39m  - compiling...
[35mevent[39m - build page: /
[35mevent[39m - build page: /next/dist/pages/_error
deepgraph { token: [32m''[39m }
memooptions {
  client: [32m'deepgraph-app'[39m,
  path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
  ssl: [33mtrue[39m,
  ws: [33mfalse[39m,
  token: [32m''[39m
}
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}
deepgraph { token: [32m''[39m }
memooptions {
  client: [32m'deepgraph-app'[39m,
  path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
  ssl: [33mtrue[39m,
  ws: [33mfalse[39m,
  token: [32m''[39m
}
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}
[35mevent[39m - compiled successfully
deepgraph { token: [32m''[39m }
memooptions {
  client: [32m'deepgraph-app'[39m,
  path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
  ssl: [33mtrue[39m,
  ws: [33mfalse[39m,
  token: [32m''[39m
}
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}
deepgraph { token: [32m''[39m }
memooptions {
  client: [32m'deepgraph-app'[39m,
  path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
  ssl: [33mtrue[39m,
  ws: [33mfalse[39m,
  token: [32m''[39m
}
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

[32mready[39m - started server on 0.0.0.0:3007, url: http://localhost:3007
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /next/dist/pages/_error
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
deepgraph { token: [32m''[39m }
memooptions {
  client: [32m'deepgraph-app'[39m,
  path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
  ssl: [33mtrue[39m,
  ws: [33mfalse[39m,
  token: [32m''[39m
} 
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}
deepgraph { token: [32m''[39m }
memooptions {
  client: [32m'deepgraph-app'[39m,
  path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
  ssl: [33mtrue[39m,
  ws: [33mfalse[39m,
  token: [32m''[39m
} 
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

[32mready[39m - started server on 0.0.0.0:3007, url: http://localhost:3007
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
deepgraph { token: [32m''[39m }
memooptions {
  client: [32m'deepgraph-app'[39m,
  path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
  ssl: [33mtrue[39m,
  ws: [33mfalse[39m,
  token: [32m''[39m
} 
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}
deepgraph { token: [32m''[39m }
memooptions {
  client: [32m'deepgraph-app'[39m,
  path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
  ssl: [33mtrue[39m,
  ws: [33mfalse[39m,
  token: [32m''[39m
} 
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}
deepgraph { token: [32m''[39m }
memooptions {
  client: [32m'deepgraph-app'[39m,
  path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
  ssl: [33mtrue[39m,
  ws: [33mfalse[39m,
  token: [32m''[39m
} 
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

[32mready[39m - started server on 0.0.0.0:3007, url: http://localhost:3007
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

Port 3007 is already in use.
[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcode[0m 1
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mpath[0m /workspace/deepcase/packages/deepgraph-app
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m command failed
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcommand[0m sh -c next dev -p $PORT
[0m
[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m A complete log of this run can be found in:
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m     /home/gitpod/.npm/_logs/2021-05-20T15_37_31_345Z-debug.log
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcode[0m 1
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mpath[0m /workspace/deepcase/packages/deepgraph-app
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m command failed
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcommand[0m sh -c npm run unsafe-dev
[0m
[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m A complete log of this run can be found in:
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m     /home/gitpod/.npm/_logs/2021-05-20T15_37_31_362Z-debug.log
[0m
> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

[32mready[39m - started server on 0.0.0.0:3007, url: http://localhost:3007
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /next/dist/pages/_error
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

Port 3007 is already in use.
[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcode[0m 1
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mpath[0m /workspace/deepcase/packages/deepgraph-app
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m command failed
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcommand[0m sh -c next dev -p $PORT
[0m
[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m A complete log of this run can be found in:
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m     /home/gitpod/.npm/_logs/2021-05-20T15_40_32_706Z-debug.log
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcode[0m 1
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mpath[0m /workspace/deepcase/packages/deepgraph-app
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m command failed
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcommand[0m sh -c npm run unsafe-dev
[0m
[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m A complete log of this run can be found in:
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m     /home/gitpod/.npm/_logs/2021-05-20T15_40_32_727Z-debug.log
[0m
> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

[32mready[39m - started server on 0.0.0.0:3007, url: http://localhost:3007
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /next/dist/pages/_error
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

[32mready[39m - started server on 0.0.0.0:3007, url: http://localhost:3007
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /next/dist/pages/_error
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

[32mready[39m - started server on 0.0.0.0:3007, url: http://localhost:3007
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /next/dist/pages/_error
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
RETURN { value: [32m'""'[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m }
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}
RETURN { value: [32m'""'[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m }
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

[32mready[39m - started server on 0.0.0.0:3007, url: http://localhost:3007
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /next/dist/pages/_error
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
ReferenceError: useState is not defined
    at useStore (/workspace/deepcase/packages/deepgraph-app/node_modules/[4m@deepcase[24m/store/local.js:38:28)
    at Object.useStore (/workspace/deepcase/packages/deepgraph-app/node_modules/[4m@deepcase[24m/store/store.js:11:12)
    at Object.useLocalStore (/workspace/deepcase/packages/deepgraph-app/node_modules/[4m@deepcase[24m/store/local.js:81:20)
    at useTokenController (/workspace/deepcase/packages/deepgraph-app/node_modules/[4m@deepcase[24m/deepgraph/imports/react-token.js:11:20)
    at TokenProvider (/workspace/deepcase/packages/deepgraph-app/node_modules/[4m@deepcase[24m/deepgraph/imports/react-token.js:15:31)
    at processChild (/workspace/deepcase/packages/deepgraph-app/node_modules/[4mreact-dom[24m/cjs/react-dom-server.node.development.js:3353:14)
    at resolve (/workspace/deepcase/packages/deepgraph-app/node_modules/[4mreact-dom[24m/cjs/react-dom-server.node.development.js:3270:5)
    at ReactDOMServerRenderer.render (/workspace/deepcase/packages/deepgraph-app/node_modules/[4mreact-dom[24m/cjs/react-dom-server.node.development.js:3753:22)
    at ReactDOMServerRenderer.read (/workspace/deepcase/packages/deepgraph-app/node_modules/[4mreact-dom[24m/cjs/react-dom-server.node.development.js:3690:29)
    at renderToString (/workspace/deepcase/packages/deepgraph-app/node_modules/[4mreact-dom[24m/cjs/react-dom-server.node.development.js:4298:27)
    at Object.renderPage (/workspace/deepcase/packages/deepgraph-app/node_modules/[4mnext[24m/dist/next-server/server/render.js:54:851)
    at Function.getInitialProps (webpack-internal:///./node_modules/[4mnext[24m/dist/pages/_document.js:141:19)
    at loadGetInitialProps (/workspace/deepcase/packages/deepgraph-app/node_modules/[4mnext[24m/dist/next-server/lib/utils.js:5:101)
    at renderToHTML (/workspace/deepcase/packages/deepgraph-app/node_modules/[4mnext[24m/dist/next-server/server/render.js:54:1142)
    at runMicrotasks (<anonymous>)
[90m    at processTicksAndRejections (internal/process/task_queues.js:93:5)[39m
ReferenceError: useState is not defined
    at useStore (/workspace/deepcase/packages/deepgraph-app/node_modules/[4m@deepcase[24m/store/local.js:38:28)
    at Object.useStore (/workspace/deepcase/packages/deepgraph-app/node_modules/[4m@deepcase[24m/store/store.js:11:12)
    at Object.useLocalStore (/workspace/deepcase/packages/deepgraph-app/node_modules/[4m@deepcase[24m/store/local.js:81:20)
    at useTokenController (/workspace/deepcase/packages/deepgraph-app/node_modules/[4m@deepcase[24m/deepgraph/imports/react-token.js:11:20)
    at TokenProvider (/workspace/deepcase/packages/deepgraph-app/node_modules/[4m@deepcase[24m/deepgraph/imports/react-token.js:15:31)
    at processChild (/workspace/deepcase/packages/deepgraph-app/node_modules/[4mreact-dom[24m/cjs/react-dom-server.node.development.js:3353:14)
    at resolve (/workspace/deepcase/packages/deepgraph-app/node_modules/[4mreact-dom[24m/cjs/react-dom-server.node.development.js:3270:5)
    at ReactDOMServerRenderer.render (/workspace/deepcase/packages/deepgraph-app/node_modules/[4mreact-dom[24m/cjs/react-dom-server.node.development.js:3753:22)
    at ReactDOMServerRenderer.read (/workspace/deepcase/packages/deepgraph-app/node_modules/[4mreact-dom[24m/cjs/react-dom-server.node.development.js:3690:29)
    at renderToString (/workspace/deepcase/packages/deepgraph-app/node_modules/[4mreact-dom[24m/cjs/react-dom-server.node.development.js:4298:27)
    at Object.renderPage (/workspace/deepcase/packages/deepgraph-app/node_modules/[4mnext[24m/dist/next-server/server/render.js:54:851)
    at Function.getInitialProps (webpack-internal:///./node_modules/[4mnext[24m/dist/pages/_document.js:141:19)
    at loadGetInitialProps (/workspace/deepcase/packages/deepgraph-app/node_modules/[4mnext[24m/dist/next-server/lib/utils.js:5:101)
    at renderToHTML (/workspace/deepcase/packages/deepgraph-app/node_modules/[4mnext[24m/dist/next-server/server/render.js:54:1142)
    at async /workspace/deepcase/packages/deepgraph-app/node_modules/[4mnext[24m/dist/next-server/server/next-server.js:109:97
    at async /workspace/deepcase/packages/deepgraph-app/node_modules/[4mnext[24m/dist/next-server/server/next-server.js:102:142
ReferenceError: useState is not defined
    at useStore (/workspace/deepcase/packages/deepgraph-app/node_modules/[4m@deepcase[24m/store/local.js:38:28)
    at Object.useStore (/workspace/deepcase/packages/deepgraph-app/node_modules/[4m@deepcase[24m/store/store.js:11:12)
    at Object.useLocalStore (/workspace/deepcase/packages/deepgraph-app/node_modules/[4m@deepcase[24m/store/local.js:81:20)
    at useTokenController (/workspace/deepcase/packages/deepgraph-app/node_modules/[4m@deepcase[24m/deepgraph/imports/react-token.js:11:20)
    at TokenProvider (/workspace/deepcase/packages/deepgraph-app/node_modules/[4m@deepcase[24m/deepgraph/imports/react-token.js:15:31)
    at processChild (/workspace/deepcase/packages/deepgraph-app/node_modules/[4mreact-dom[24m/cjs/react-dom-server.node.development.js:3353:14)
    at resolve (/workspace/deepcase/packages/deepgraph-app/node_modules/[4mreact-dom[24m/cjs/react-dom-server.node.development.js:3270:5)
    at ReactDOMServerRenderer.render (/workspace/deepcase/packages/deepgraph-app/node_modules/[4mreact-dom[24m/cjs/react-dom-server.node.development.js:3753:22)
    at ReactDOMServerRenderer.read (/workspace/deepcase/packages/deepgraph-app/node_modules/[4mreact-dom[24m/cjs/react-dom-server.node.development.js:3690:29)
    at renderToString (/workspace/deepcase/packages/deepgraph-app/node_modules/[4mreact-dom[24m/cjs/react-dom-server.node.development.js:4298:27)
    at Object.renderPage (/workspace/deepcase/packages/deepgraph-app/node_modules/[4mnext[24m/dist/next-server/server/render.js:54:851)
    at Function.getInitialProps (webpack-internal:///./node_modules/[4mnext[24m/dist/pages/_document.js:141:19)
    at loadGetInitialProps (/workspace/deepcase/packages/deepgraph-app/node_modules/[4mnext[24m/dist/next-server/lib/utils.js:5:101)
    at renderToHTML (/workspace/deepcase/packages/deepgraph-app/node_modules/[4mnext[24m/dist/next-server/server/render.js:54:1142)
    at async /workspace/deepcase/packages/deepgraph-app/node_modules/[4mnext[24m/dist/next-server/server/next-server.js:109:97
    at async /workspace/deepcase/packages/deepgraph-app/node_modules/[4mnext[24m/dist/next-server/server/next-server.js:102:142
ReferenceError: useState is not defined
    at useStore (/workspace/deepcase/packages/deepgraph-app/node_modules/[4m@deepcase[24m/store/local.js:38:28)
    at Object.useStore (/workspace/deepcase/packages/deepgraph-app/node_modules/[4m@deepcase[24m/store/store.js:11:12)
    at Object.useLocalStore (/workspace/deepcase/packages/deepgraph-app/node_modules/[4m@deepcase[24m/store/local.js:81:20)
    at useTokenController (/workspace/deepcase/packages/deepgraph-app/node_modules/[4m@deepcase[24m/deepgraph/imports/react-token.js:11:20)
    at TokenProvider (/workspace/deepcase/packages/deepgraph-app/node_modules/[4m@deepcase[24m/deepgraph/imports/react-token.js:15:31)
    at processChild (/workspace/deepcase/packages/deepgraph-app/node_modules/[4mreact-dom[24m/cjs/react-dom-server.node.development.js:3353:14)
    at resolve (/workspace/deepcase/packages/deepgraph-app/node_modules/[4mreact-dom[24m/cjs/react-dom-server.node.development.js:3270:5)
    at ReactDOMServerRenderer.render (/workspace/deepcase/packages/deepgraph-app/node_modules/[4mreact-dom[24m/cjs/react-dom-server.node.development.js:3753:22)
    at ReactDOMServerRenderer.read (/workspace/deepcase/packages/deepgraph-app/node_modules/[4mreact-dom[24m/cjs/react-dom-server.node.development.js:3690:29)
    at renderToString (/workspace/deepcase/packages/deepgraph-app/node_modules/[4mreact-dom[24m/cjs/react-dom-server.node.development.js:4298:27)
    at Object.renderPage (/workspace/deepcase/packages/deepgraph-app/node_modules/[4mnext[24m/dist/next-server/server/render.js:54:851)
    at Function.getInitialProps (webpack-internal:///./node_modules/[4mnext[24m/dist/pages/_document.js:141:19)
    at loadGetInitialProps (/workspace/deepcase/packages/deepgraph-app/node_modules/[4mnext[24m/dist/next-server/lib/utils.js:5:101)
    at renderToHTML (/workspace/deepcase/packages/deepgraph-app/node_modules/[4mnext[24m/dist/next-server/server/render.js:54:1142)
    at async /workspace/deepcase/packages/deepgraph-app/node_modules/[4mnext[24m/dist/next-server/server/next-server.js:109:97
    at async /workspace/deepcase/packages/deepgraph-app/node_modules/[4mnext[24m/dist/next-server/server/next-server.js:102:142

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

[32mready[39m - started server on 0.0.0.0:3007, url: http://localhost:3007
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /next/dist/pages/_error
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
RETURN { value: [32m'""'[39m, uniqid: [ [33m1[39m, [36m[Function: bound dispatchAction][39m ] }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [ [33m2[39m, [36m[Function: bound dispatchAction][39m ] }
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

[32mready[39m - started server on 0.0.0.0:3007, url: http://localhost:3007
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /next/dist/pages/_error
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
RETURN { value: [32m'""'[39m, uniqid: [ [33m1[39m, [36m[Function: bound dispatchAction][39m ] }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [ [33m2[39m, [36m[Function: bound dispatchAction][39m ] }
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [ [33m3[39m, [36m[Function: bound dispatchAction][39m ] }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [ [33m4[39m, [36m[Function: bound dispatchAction][39m ] }
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

[32mready[39m - started server on 0.0.0.0:3007, url: http://localhost:3007
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /next/dist/pages/_error
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
RETURN { value: [32m'""'[39m, uniqid: [33m1[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m2[39m }
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m3[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m4[39m }
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

[32mready[39m - started server on 0.0.0.0:3007, url: http://localhost:3007
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
RETURN { value: [32m'""'[39m, uniqid: [33m1[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m2[39m }
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

[32mready[39m - started server on 0.0.0.0:3007, url: http://localhost:3007
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /
[36mwait[39m  - compiling...
[35mevent[39m - build page: /next/dist/pages/_error
EventEmitter {
  _events: [Object: null prototype] {},
  _eventsCount: [33m0[39m,
  _maxListeners: [90mundefined[39m,
  [[32mSymbol(kCapture)[39m]: [33mfalse[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m1[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m2[39m }
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m3[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m4[39m }
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}
[35mevent[39m - compiled successfully
RETURN { value: [32m'""'[39m, uniqid: [33m5[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m6[39m }
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m7[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m8[39m }
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

[32mready[39m - started server on 0.0.0.0:3007, url: http://localhost:3007
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
EventEmitter {
  _events: [Object: null prototype] {},
  _eventsCount: [33m0[39m,
  _maxListeners: [90mundefined[39m,
  [[32mSymbol(kCapture)[39m]: [33mfalse[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m1[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m2[39m }
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
RETURN { value: [32m'""'[39m, uniqid: [33m3[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m4[39m }
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m5[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m6[39m }
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m7[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m8[39m }
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}
[35mevent[39m - build page: /next/dist/pages/_error
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
RETURN { value: [32m'""'[39m, uniqid: [33m9[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m10[39m }
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m11[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m12[39m }
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

[32mready[39m - started server on 0.0.0.0:3007, url: http://localhost:3007
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /next/dist/pages/_error
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
EventEmitter {
  _events: [Object: null prototype] {},
  _eventsCount: [33m0[39m,
  _maxListeners: [90mundefined[39m,
  [[32mSymbol(kCapture)[39m]: [33mfalse[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m1[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu04.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m2[39m }
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

[32mready[39m - started server on 0.0.0.0:3007, url: http://localhost:3007
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
EventEmitter {
  _events: [Object: null prototype] {},
  _eventsCount: [33m0[39m,
  _maxListeners: [90mundefined[39m,
  [[32mSymbol(kCapture)[39m]: [33mfalse[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m1[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu07.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m2[39m }
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}
[35mevent[39m - build page: /next/dist/pages/_error
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

[32mready[39m - started server on 0.0.0.0:3007, url: http://localhost:3007
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
EventEmitter {
  _events: [Object: null prototype] {},
  _eventsCount: [33m0[39m,
  _maxListeners: [90mundefined[39m,
  [[32mSymbol(kCapture)[39m]: [33mfalse[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m1[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu07.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m2[39m }
[36m<ref *1>[39m ApolloClient {
  defaultOptions: {
    watchQuery: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m },
    query: { fetchPolicy: [32m'no-cache'[39m, errorPolicy: [32m'ignore'[39m }
  },
  resetStoreCallbacks: [],
  clearStoreCallbacks: [],
  link: ApolloLink { request: [36m[Function (anonymous)][39m },
  cache: InMemoryCache {
    watches: Set(0) {},
    typenameDocumentCache: Map(0) {},
    cacheKeyRoot: KeyTrie { weakness: [33mtrue[39m },
    silenceBroadcast: [33mfalse[39m,
    config: {
      fragmentMatcher: HeuristicFragmentMatcher {},
      dataIdFromObject: [36m[Function: defaultDataIdFromObject][39m,
      addTypename: [33mtrue[39m,
      resultCaching: [33mfalse[39m,
      freezeResults: [33mfalse[39m
    },
    addTypename: [33mtrue[39m,
    data: ObjectCache { data: {} },
    optimisticData: ObjectCache { data: {} },
    storeWriter: StoreWriter {},
    storeReader: StoreReader {
      freezeResults: [33mfalse[39m,
      executeStoreQuery: [36m[Function][39m,
      executeSelectionSet: [36m[Function][39m,
      executeSubSelectedArray: [36m[Function][39m
    },
    maybeBroadcastWatch: [Function: optimistic] { dirty: [36m[Function (anonymous)][39m }
  },
  disableNetworkFetches: [33mtrue[39m,
  queryDeduplication: [33mtrue[39m,
  typeDefs: [90mundefined[39m,
  watchQuery: [36m[Function: bound ][39m,
  query: [36m[Function: bound ][39m,
  mutate: [36m[Function: bound ][39m,
  resetStore: [36m[Function: bound ][39m,
  reFetchObservableQueries: [36m[Function: bound ][39m,
  version: [32m'3.3.19'[39m,
  localState: LocalState {
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    client: [36m[Circular *1][39m
  },
  queryManager: QueryManager {
    clientAwareness: { name: [90mundefined[39m, version: [90mundefined[39m },
    queries: Map(0) {},
    fetchCancelFns: Map(0) {},
    transformCache: WeakMap { [36m<items unknown>[39m },
    queryIdCounter: [33m1[39m,
    requestIdCounter: [33m1[39m,
    mutationIdCounter: [33m1[39m,
    inFlightLinkObservables: Map(0) {},
    cache: InMemoryCache {
      watches: Set(0) {},
      typenameDocumentCache: Map(0) {},
      cacheKeyRoot: [36m[KeyTrie][39m,
      silenceBroadcast: [33mfalse[39m,
      config: [36m[Object][39m,
      addTypename: [33mtrue[39m,
      data: [36m[ObjectCache][39m,
      optimisticData: [36m[ObjectCache][39m,
      storeWriter: StoreWriter {},
      storeReader: [36m[StoreReader][39m,
      maybeBroadcastWatch: [36m[Function][39m
    },
    link: ApolloLink { request: [36m[Function (anonymous)][39m },
    queryDeduplication: [33mtrue[39m,
    localState: LocalState { cache: [36m[InMemoryCache][39m, client: [36m[Circular *1][39m },
    ssrMode: [33mtrue[39m,
    assumeImmutableResults: [33mfalse[39m,
    onBroadcast: [36m[Function (anonymous)][39m,
    mutationStore: [Object: null prototype] {}
  },
  jwt_token: [32m''[39m
}
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
RETURN { value: [32m'""'[39m, uniqid: [33m3[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu07.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m4[39m }
RETURN { value: [32m'""'[39m, uniqid: [33m5[39m }
RETURN { value: [32m'""'[39m, uniqid: [33m6[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu07.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m7[39m }
RETURN { value: [32m'""'[39m, uniqid: [33m8[39m }
RETURN { value: [32m'""'[39m, uniqid: [33m9[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu07.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m10[39m }
RETURN { value: [32m'""'[39m, uniqid: [33m11[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[31merror[39m - [36m./pages/index.tsx[39m:[33m14[39m:[33m0[39m
[31m[1mModule not found[22m[39m: Can't resolve '[32m./ui[39m'
[0m [90m 12 | [39m[36mimport[39m { [33mForceGraph[39m[33m,[39m [33mForceGraph2D[39m } [36mfrom[39m [32m'../imports/graph'[39m[33m;[39m[0m
[0m [90m 13 | [39m[36mimport[39m { [33mLINKS[39m[33m,[39m [33mINSERT_LINKS[39m } [36mfrom[39m [32m'../imports/gql'[39m[33m;[39m[0m
[0m[31m[1m>[22m[39m[90m 14 | [39m[36mimport[39m { [33mPaper[39m[33m,[39m [33mButtonGroup[39m[33m,[39m [33mButton[39m[33m,[39m makeStyles[33m,[39m [33mGrid[39m[33m,[39m [33mCard[39m[33m,[39m [33mCardActions[39m[33m,[39m [33mCardContent[39m[33m,[39m [33mIconButton[39m[33m,[39m [33mTypography[39m[33m,[39m [33mPopover[39m } [36mfrom[39m [32m'./ui'[39m[33m;[39m[0m
[0m [90m 15 | [39m[36mimport[39m { [33mClear[39m[33m,[39m [33mAdd[39m } [36mfrom[39m [32m'@material-ui/icons'[39m[33m;[39m[0m
[0m [90m 16 | [39m[36mimport[39m { useDebounceCallback } [36mfrom[39m [32m'@react-hook/debounce'[39m[33m;[39m[0m
[0m [90m 17 | [39m[36mimport[39m { useImmutableData } [36mfrom[39m [32m'../imports/use-immutable-data'[39m[33m;[39m[0m
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
RETURN { value: [32m'""'[39m, uniqid: [33m12[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu07.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m13[39m }
RETURN { value: [32m'""'[39m, uniqid: [33m14[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[31merror[39m - [36m./imports/link-card.tsx[39m:[33m23[39m:[33m50[39m
[31m[1mSyntax error[22m[39m: Unexpected token, expected "}"

[0m [90m 21 | [39m          variant[33m=[39m[32m"outlined"[39m size[33m=[39m[32m"small"[39m fullWidth[0m
[0m [90m 22 | [39m          defaultValue[33m=[39m{link[33m.[39mstring[33m.[39mvalue [33m||[39m [32m''[39m}[0m
[0m[31m[1m>[22m[39m[90m 23 | [39m          onChange[33m=[39m{[33m![39m[33m![39mlink[33m.[39mstring[33m.[39mid [33m&&[39m async (e) [33m=>[39m {[0m
[0m [90m    | [39m                                                  [31m[1m^[22m[39m[0m
[0m [90m 24 | [39m            await updateString({ variables[33m:[39m { where[33m:[39m { id[33m:[39m { _eq[33m:[39m link[33m.[39mstring[33m.[39mid } }[33m,[39m set[33m:[39m { value[33m:[39m e[33m?[39m[33m.[39mtarget[33m?[39m[33m.[39mvalue } } })[33m;[39m[0m
[0m [90m 25 | [39m          }}[0m
[0m [90m 26 | [39m        [33m/[39m[33m>[39m[0m
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[31merror[39m - [36m./imports/link-card.tsx[39m:[33m14[39m:[33m9[39m
[31m[1mSyntax error[22m[39m: Identifier 'updateString' has already been declared

[0m [90m 12 | [39m}) {[0m
[0m [90m 13 | [39m  [36mconst[39m [updateString] [33m=[39m useMutation([33mUPDATE_STRING[39m)[33m;[39m[0m
[0m[31m[1m>[22m[39m[90m 14 | [39m  [36mconst[39m [updateString] [33m=[39m useMutation([33mUPDATE_STRING[39m)[33m;[39m[0m
[0m [90m    | [39m         [31m[1m^[22m[39m[0m
[0m [90m 15 | [39m  [36mconst[39m client [33m=[39m useApolloClient()[33m;[39m[0m
[0m [90m 16 | [39m  [36mconst[39m updateStringD [33m=[39m useDebouncedCallback(async (value) [33m=>[39m {[0m
[0m [90m 17 | [39m    await client[33m.[39mmutate(updateString(link[33m.[39mstring[33m.[39mid[33m,[39m value))[33m;[39m[0m
[36mwait[39m  - compiling...
[31merror[39m - [36m./imports/link-card.tsx[39m:[33m14[39m:[33m9[39m
[31m[1mSyntax error[22m[39m: Identifier 'updateString' has already been declared

[0m [90m 12 | [39m}) {[0m
[0m [90m 13 | [39m  [36mconst[39m [updateString] [33m=[39m useMutation([33mUPDATE_STRING[39m)[33m;[39m[0m
[0m[31m[1m>[22m[39m[90m 14 | [39m  [36mconst[39m [updateString] [33m=[39m useMutation([33mUPDATE_STRING[39m)[33m;[39m[0m
[0m [90m    | [39m         [31m[1m^[22m[39m[0m
[0m [90m 15 | [39m  [36mconst[39m client [33m=[39m useApolloClient()[33m;[39m[0m
[0m [90m 16 | [39m  [36mconst[39m updateStringD [33m=[39m useDebouncedCallback(async (value) [33m=>[39m {[0m
[0m [90m 17 | [39m    await client[33m.[39mmutate([33m...[39mupdateString(link[33m.[39mstring[33m.[39mid[33m,[39m value))[33m;[39m[0m
[36mwait[39m  - compiling...
[31merror[39m - [36m./imports/link-card.tsx[39m:[33m14[39m:[33m9[39m
[31m[1mSyntax error[22m[39m: Identifier 'updateString' has already been declared

[0m [90m 12 | [39m}) {[0m
[0m [90m 13 | [39m  [36mconst[39m [updateString] [33m=[39m useMutation([33mUPDATE_STRING[39m)[33m;[39m[0m
[0m[31m[1m>[22m[39m[90m 14 | [39m  [36mconst[39m [updateString] [33m=[39m useMutation([33mUPDATE_STRING[39m)[33m;[39m[0m
[0m [90m    | [39m         [31m[1m^[22m[39m[0m
[0m [90m 15 | [39m  [36mconst[39m client [33m=[39m useApolloClient()[33m;[39m[0m
[0m [90m 16 | [39m  [36mconst[39m updateStringD [33m=[39m useDebouncedCallback(async (value) [33m=>[39m {[0m
[0m [90m 17 | [39m    await client[33m.[39mmutate(updateString(link[33m.[39mstring[33m.[39mid[33m,[39m value))[33m;[39m[0m
[36mwait[39m  - compiling...
[31merror[39m - [36m./imports/link-card.tsx[39m:[33m14[39m:[33m9[39m
[31m[1mSyntax error[22m[39m: Identifier 'updateString' has already been declared

[0m [90m 12 | [39m}) {[0m
[0m [90m 13 | [39m  [36mconst[39m [updateString] [33m=[39m useMutation([33mUPDATE_STRING[39m)[33m;[39m[0m
[0m[31m[1m>[22m[39m[90m 14 | [39m  [36mconst[39m [updateString] [33m=[39m useMutation([33mUPDATE_STRING[39m)[33m;[39m[0m
[0m [90m    | [39m         [31m[1m^[22m[39m[0m
[0m [90m 15 | [39m  [36mconst[39m client [33m=[39m useApolloClient()[33m;[39m[0m
[0m [90m 16 | [39m  [36mconst[39m updateStringD [33m=[39m useDebouncedCallback(async (value) [33m=>[39m {[0m
[0m [90m 17 | [39m    await client[33m.[39mmutate(updateString(link[33m.[39mstring[33m.[39mid[33m,[39m value))[33m;[39m[0m
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[31merror[39m - [36m./imports/link-card.tsx[39m:[33m33[39m:[33m65[39m
[31m[1mSyntax error[22m[39m: Expected corresponding JSX closing tag for <Delete>

[0m [90m 31 | [39m          defaultValue[33m=[39m{link[33m.[39mstring[33m.[39mvalue [33m||[39m [32m''[39m}[0m
[0m [90m 32 | [39m          [33mInputProps[39m[33m=[39m{{[0m
[0m[31m[1m>[22m[39m[90m 33 | [39m            endAdornment[33m:[39m [33m<[39m[33mInputAdornment[39m position[33m=[39m[32m"end"[39m[33m>[39m[33m<[39m[33mDelete[39m[33m>[39m[33m<[39m[33m/[39m[33mInputAdornment[39m[33m>[39m[33m,[39m[0m
[0m [90m    | [39m                                                                 [31m[1m^[22m[39m[0m
[0m [90m 34 | [39m          }}[0m
[0m [90m 35 | [39m          onChange[33m=[39m{[33m![39m[33m![39mlink[33m.[39mstring[33m.[39mid [33m?[39m async (e) [33m=>[39m {[0m
[0m [90m 36 | [39m            updateStringD(e[33m.[39mtarget[33m.[39mvalue)[33m;[39m[0m
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[31merror[39m - [36m./imports/link-card.tsx[39m:[33m16[39m:[33m60[39m
[31m[1mSyntax error[22m[39m: Unexpected token, expected ","

[0m [90m 14 | [39m  [36mconst[39m client [33m=[39m useApolloClient()[33m;[39m[0m
[0m [90m 15 | [39m  [36mconst[39m updateStringD [33m=[39m useDebouncedCallback(async (value) [33m=>[39m ([0m
[0m[31m[1m>[22m[39m[90m 16 | [39m    await client[33m.[39mmutate(updateString(link[33m.[39mstring[33m.[39mid[33m,[39m value))[33m;[39m[0m
[0m [90m    | [39m                                                            [31m[1m^[22m[39m[0m
[0m [90m 17 | [39m  )[33m,[39m [35m1000[39m)[33m;[39m[0m
[0m [90m 18 | [39m  [36mconst[39m insertStringD [33m=[39m useCallback(async () [33m=>[39m ([0m
[0m [90m 19 | [39m    await client[33m.[39mmutate(insertString(link[33m.[39mid[33m,[39m [32m''[39m))[33m;[39m[0m
[36mwait[39m  - compiling...
[31merror[39m - [36m./imports/link-card.tsx[39m:[33m16[39m:[33m60[39m
[31m[1mSyntax error[22m[39m: Unexpected token, expected ","

[0m [90m 14 | [39m  [36mconst[39m client [33m=[39m useApolloClient()[33m;[39m[0m
[0m [90m 15 | [39m  [36mconst[39m updateStringD [33m=[39m useDebouncedCallback(async (value) [33m=>[39m ([0m
[0m[31m[1m>[22m[39m[90m 16 | [39m    await client[33m.[39mmutate(updateString(link[33m.[39mstring[33m.[39mid[33m,[39m value))[33m;[39m[0m
[0m [90m    | [39m                                                            [31m[1m^[22m[39m[0m
[0m [90m 17 | [39m  )[33m,[39m [35m1000[39m)[33m;[39m[0m
[0m [90m 18 | [39m  [36mconst[39m insertStringD [33m=[39m useCallback(async () [33m=>[39m ([0m
[0m [90m 19 | [39m    await client[33m.[39mmutate(insertString(link[33m.[39mid[33m,[39m [32m''[39m))[33m;[39m[0m
[36mwait[39m  - compiling...
[31merror[39m - [36m./imports/link-card.tsx[39m:[33m16[39m:[33m60[39m
[31m[1mSyntax error[22m[39m: Unexpected token, expected ","

[0m [90m 14 | [39m  [36mconst[39m client [33m=[39m useApolloClient()[33m;[39m[0m
[0m [90m 15 | [39m  [36mconst[39m updateStringD [33m=[39m useDebouncedCallback(async (value) [33m=>[39m ([0m
[0m[31m[1m>[22m[39m[90m 16 | [39m    await client[33m.[39mmutate(updateString(link[33m.[39mstring[33m.[39mid[33m,[39m value))[33m;[39m[0m
[0m [90m    | [39m                                                            [31m[1m^[22m[39m[0m
[0m [90m 17 | [39m  )[33m,[39m [35m1000[39m)[33m;[39m[0m
[0m [90m 18 | [39m  [36mconst[39m insertStringD [33m=[39m useCallback(async () [33m=>[39m ([0m
[0m [90m 19 | [39m    await client[33m.[39mmutate(insertString(link[33m.[39mid[33m,[39m [32m''[39m))[33m;[39m[0m
[36mwait[39m  - compiling...
[31merror[39m - [36m./imports/link-card.tsx[39m:[33m16[39m:[33m59[39m
[31m[1mSyntax error[22m[39m: Unexpected token, expected ","

[0m [90m 14 | [39m  [36mconst[39m client [33m=[39m useApolloClient()[33m;[39m[0m
[0m [90m 15 | [39m  [36mconst[39m updateStringD [33m=[39m useDebouncedCallback(async (value) [33m=>[39m ([0m
[0m[31m[1m>[22m[39m[90m 16 | [39m    await client[33m.[39mmutate(updateString(link[33m.[39mstring[33m.[39mid[33m,[39m value)[33m;[39m[0m
[0m [90m    | [39m                                                           [31m[1m^[22m[39m[0m
[0m [90m 17 | [39m  )[33m,[39m [35m1000[39m)[33m;[39m[0m
[0m [90m 18 | [39m  [36mconst[39m insertStringD [33m=[39m useCallback(async () [33m=>[39m ([0m
[0m [90m 19 | [39m    await client[33m.[39mmutate(insertString(link[33m.[39mid[33m,[39m [32m''[39m)[33m;[39m[0m
[36mwait[39m  - compiling...
[31merror[39m - [36m./imports/link-card.tsx[39m:[33m37[39m:[33m41[39m
[31m[1mSyntax error[22m[39m: Unexpected token

[0m [90m 35 | [39m          [33mInputProps[39m[33m=[39m{{[0m
[0m [90m 36 | [39m            endAdornment[33m:[39m [33m<[39m[33mInputAdornment[39m position[33m=[39m[32m"end"[39m[33m>[39m[0m
[0m[31m[1m>[22m[39m[90m 37 | [39m              [33m<[39m[33mIconButton[39m onClick[33m=[39m{() [33m=>[39m }[33m>[39m[33m<[39m[33mDelete[39m[33m/[39m[33m>[39m[33m<[39m[33m/[39m[33mIconButton[39m[33m>[39m[0m
[0m [90m    | [39m                                         [31m[1m^[22m[39m[0m
[0m [90m 38 | [39m            [33m<[39m[33m/[39m[33mInputAdornment[39m[33m>[39m[33m,[39m[0m
[0m [90m 39 | [39m          }}[0m
[0m [90m 40 | [39m          onChange[33m=[39m{[33m![39m[33m![39mlink[33m.[39mstring[33m.[39mid [33m?[39m async (e) [33m=>[39m {[0m
[36mwait[39m  - compiling...
[31merror[39m - ./imports/link-card.tsx
Attempted import error: 'deletetString' is not exported from './gql'.
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
RETURN { value: [32m'""'[39m, uniqid: [33m15[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu07.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m16[39m }
RETURN { value: [32m'""'[39m, uniqid: [33m17[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
RETURN { value: [32m'""'[39m, uniqid: [33m18[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu07.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m19[39m }
RETURN { value: [32m'""'[39m, uniqid: [33m20[39m }
RETURN { value: [32m'""'[39m, uniqid: [33m21[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu07.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m22[39m }
RETURN { value: [32m'""'[39m, uniqid: [33m23[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
RETURN { value: [32m'""'[39m, uniqid: [33m24[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu07.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m25[39m }
RETURN { value: [32m'""'[39m, uniqid: [33m26[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
RETURN { value: [32m'""'[39m, uniqid: [33m27[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu07.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m28[39m }
RETURN { value: [32m'""'[39m, uniqid: [33m29[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

Port 3007 is already in use.
[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcode[0m 1
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mpath[0m /workspace/deepcase/packages/deepgraph-app
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m command failed
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcommand[0m sh -c next dev -p $PORT
[0m
[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m A complete log of this run can be found in:
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m     /home/gitpod/.npm/_logs/2021-05-24T00_16_36_261Z-debug.log
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcode[0m 1
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mpath[0m /workspace/deepcase/packages/deepgraph-app
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m command failed
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcommand[0m sh -c npm run unsafe-dev
[0m
[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m A complete log of this run can be found in:
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m     /home/gitpod/.npm/_logs/2021-05-24T00_16_36_279Z-debug.log
[0m
> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

Port 3007 is already in use.
[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcode[0m 1
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mpath[0m /workspace/deepcase/packages/deepgraph-app
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m command failed
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcommand[0m sh -c next dev -p $PORT
[0m
[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m A complete log of this run can be found in:
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m     /home/gitpod/.npm/_logs/2021-05-24T00_36_14_586Z-debug.log
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcode[0m 1
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mpath[0m /workspace/deepcase/packages/deepgraph-app
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m command failed
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcommand[0m sh -c npm run unsafe-dev
[0m
[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m A complete log of this run can be found in:
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m     /home/gitpod/.npm/_logs/2021-05-24T00_36_14_601Z-debug.log
[0m
> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

Port 3007 is already in use.
[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcode[0m 1
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mpath[0m /workspace/deepcase/packages/deepgraph-app
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m command failed
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcommand[0m sh -c next dev -p $PORT
[0m
[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m A complete log of this run can be found in:
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m     /home/gitpod/.npm/_logs/2021-05-24T00_49_37_773Z-debug.log
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcode[0m 1
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mpath[0m /workspace/deepcase/packages/deepgraph-app
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m command failed
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcommand[0m sh -c npm run unsafe-dev
[0m
[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m A complete log of this run can be found in:
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m     /home/gitpod/.npm/_logs/2021-05-24T00_49_37_792Z-debug.log
[0mRETURN { value: [32m'""'[39m, uniqid: [33m30[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu07.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m31[39m }
RETURN { value: [32m'""'[39m, uniqid: [33m32[39m }

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

[32mready[39m - started server on 0.0.0.0:3007, url: http://localhost:3007
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
EventEmitter {
  _events: [Object: null prototype] {},
  _eventsCount: [33m0[39m,
  _maxListeners: [90mundefined[39m,
  [[32mSymbol(kCapture)[39m]: [33mfalse[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m1[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu07.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m2[39m }
RETURN { value: [32m'""'[39m, uniqid: [33m3[39m }

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

[32mready[39m - started server on 0.0.0.0:3007, url: http://localhost:3007
[35mevent[39m - compiled successfully

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

Port 3007 is already in use.
[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcode[0m 1
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mpath[0m /workspace/deepcase/packages/deepgraph-app
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m command failed
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcommand[0m sh -c next dev -p $PORT
[0m
[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m A complete log of this run can be found in:
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m     /home/gitpod/.npm/_logs/2021-05-24T21_22_28_620Z-debug.log
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcode[0m 1
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mpath[0m /workspace/deepcase/packages/deepgraph-app
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m command failed
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcommand[0m sh -c npm run unsafe-dev
[0m
[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m A complete log of this run can be found in:
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m     /home/gitpod/.npm/_logs/2021-05-24T21_22_28_655Z-debug.log
[0m
> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

[32mready[39m - started server on 0.0.0.0:3007, url: http://localhost:3007
[35mevent[39m - compiled successfully

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

[32mready[39m - started server on 0.0.0.0:3007, url: http://localhost:3007
[35mevent[39m - compiled successfully

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

[32mready[39m - started server on 0.0.0.0:3007, url: http://localhost:3007
[35mevent[39m - compiled successfully

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

[32mready[39m - started server on 0.0.0.0:3007, url: http://localhost:3007
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
EventEmitter {
  _events: [Object: null prototype] {},
  _eventsCount: [33m0[39m,
  _maxListeners: [90mundefined[39m,
  [[32mSymbol(kCapture)[39m]: [33mfalse[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m1[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu07.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m2[39m }
RETURN { value: [32m'""'[39m, uniqid: [33m3[39m }
[35mevent[39m - build page: /next/dist/pages/_error
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

[32mready[39m - started server on 0.0.0.0:3007, url: http://localhost:3007
[35mevent[39m - compiled successfully
[35mevent[39m - build page: /
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
EventEmitter {
  _events: [Object: null prototype] {},
  _eventsCount: [33m0[39m,
  _maxListeners: [90mundefined[39m,
  [[32mSymbol(kCapture)[39m]: [33mfalse[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m1[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu08.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m2[39m }
RETURN { value: [32m'""'[39m, uniqid: [33m3[39m }
[35mevent[39m - build page: /next/dist/pages/_error
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

Port 3007 is already in use.
[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcode[0m 1
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mpath[0m /workspace/deepcase/packages/deepgraph-app
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m command failed
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcommand[0m sh -c next dev -p $PORT
[0m
[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m A complete log of this run can be found in:
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m     /home/gitpod/.npm/_logs/2021-05-30T23_03_30_678Z-debug.log
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcode[0m 1
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mpath[0m /workspace/deepcase/packages/deepgraph-app
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m command failed
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcommand[0m sh -c npm run unsafe-dev
[0m
[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m A complete log of this run can be found in:
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m     /home/gitpod/.npm/_logs/2021-05-30T23_03_30_700Z-debug.log
[0m
> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

Port 3007 is already in use.
[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcode[0m 1
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mpath[0m /workspace/deepcase/packages/deepgraph-app
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m command failed
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcommand[0m sh -c next dev -p $PORT
[0m
[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m A complete log of this run can be found in:
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m     /home/gitpod/.npm/_logs/2021-05-30T23_09_33_469Z-debug.log
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcode[0m 1
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mpath[0m /workspace/deepcase/packages/deepgraph-app
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m command failed
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcommand[0m sh -c npm run unsafe-dev
[0m
[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m A complete log of this run can be found in:
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m     /home/gitpod/.npm/_logs/2021-05-30T23_09_33_487Z-debug.log
[0mRETURN { value: [32m'""'[39m, uniqid: [33m4[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu08.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m5[39m }
RETURN { value: [32m'""'[39m, uniqid: [33m6[39m }
[36mwait[39m  - compiling...
[31merror[39m - [36m./pages/index.tsx[39m:[33m166[39m:[33m20[39m
[31m[1mSyntax error[22m[39m: Unexpected token

[0m [90m 164 | [39m                      to_id[33m:[39m inserting[33m.[39mto [33m||[39m [35m0[39m[33m,[39m[0m
[0m [90m 165 | [39m                      type_id[33m:[39m inserting[33m.[39mtype [33m||[39m [35m0[39m[33m,[39m[0m
[0m[31m[1m>[22m[39m[90m 166 | [39m                    )[33m;[39m[0m
[0m [90m     | [39m                    [31m[1m^[22m[39m[0m
[0m [90m 167 | [39m                  }}[0m
[0m [90m 168 | [39m                [33m>[39m[33m<[39m[33mAdd[39m[33m/[39m[33m>[39m[33m<[39m[33m/[39m[33mButton[39m[33m>[39m[0m
[0m [90m 169 | [39m                [33m<[39m[33mButton[39m[0m
[36mwait[39m  - compiling...
[35mevent[39m - build page: /next/dist/pages/_error
[35mevent[39m - compiled successfully
RETURN { value: [32m'""'[39m, uniqid: [33m7[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu08.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m8[39m }
RETURN { value: [32m'""'[39m, uniqid: [33m9[39m }
RETURN { value: [32m'""'[39m, uniqid: [33m10[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu08.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m11[39m }
RETURN { value: [32m'""'[39m, uniqid: [33m12[39m }

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

Port 3007 is already in use.
[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcode[0m 1
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mpath[0m /workspace/deepcase/packages/deepgraph-app
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m command failed
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcommand[0m sh -c next dev -p $PORT
[0m
[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m A complete log of this run can be found in:
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m     /home/gitpod/.npm/_logs/2021-05-30T23_38_03_144Z-debug.log
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcode[0m 1
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mpath[0m /workspace/deepcase/packages/deepgraph-app
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m command failed
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcommand[0m sh -c npm run unsafe-dev
[0m
[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m A complete log of this run can be found in:
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m     /home/gitpod/.npm/_logs/2021-05-30T23_38_03_162Z-debug.log
[0mRETURN { value: [32m'""'[39m, uniqid: [33m13[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu08.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m14[39m }
RETURN { value: [32m'""'[39m, uniqid: [33m15[39m }

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

Port 3007 is already in use.
[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcode[0m 1
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mpath[0m /workspace/deepcase/packages/deepgraph-app
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m command failed
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcommand[0m sh -c next dev -p $PORT
[0m
[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m A complete log of this run can be found in:
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m     /home/gitpod/.npm/_logs/2021-05-31T00_00_49_506Z-debug.log
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcode[0m 1
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mpath[0m /workspace/deepcase/packages/deepgraph-app
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m command failed
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcommand[0m sh -c npm run unsafe-dev
[0m
[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m A complete log of this run can be found in:
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m     /home/gitpod/.npm/_logs/2021-05-31T00_00_49_534Z-debug.log
[0mRETURN { value: [32m'""'[39m, uniqid: [33m16[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu08.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m17[39m }
RETURN { value: [32m'""'[39m, uniqid: [33m18[39m }
RETURN { value: [32m'""'[39m, uniqid: [33m19[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu08.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m20[39m }
RETURN { value: [32m'""'[39m, uniqid: [33m21[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
RETURN { value: [32m'""'[39m, uniqid: [33m22[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu08.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m23[39m }
RETURN { value: [32m'""'[39m, uniqid: [33m24[39m }

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

Port 3007 is already in use.
[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcode[0m 1
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mpath[0m /workspace/deepcase/packages/deepgraph-app
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m command failed
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcommand[0m sh -c next dev -p $PORT
[0m
[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m A complete log of this run can be found in:
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m     /home/gitpod/.npm/_logs/2021-05-31T00_39_51_707Z-debug.log
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcode[0m 1
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mpath[0m /workspace/deepcase/packages/deepgraph-app
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m command failed
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcommand[0m sh -c npm run unsafe-dev
[0m
[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m A complete log of this run can be found in:
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m     /home/gitpod/.npm/_logs/2021-05-31T00_39_51_726Z-debug.log
[0mRETURN { value: [32m'""'[39m, uniqid: [33m25[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu08.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m26[39m }
RETURN { value: [32m'""'[39m, uniqid: [33m27[39m }

> @deepcase/deepgraph-app@0.0.1 dev
> npm run unsafe-dev


> @deepcase/deepgraph-app@0.0.1 unsafe-dev
> next dev -p $PORT

Port 3007 is already in use.
[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcode[0m 1
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mpath[0m /workspace/deepcase/packages/deepgraph-app
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m command failed
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcommand[0m sh -c next dev -p $PORT
[0m
[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m A complete log of this run can be found in:
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m     /home/gitpod/.npm/_logs/2021-05-31T00_44_34_842Z-debug.log
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcode[0m 1
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mpath[0m /workspace/deepcase/packages/deepgraph-app
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m command failed
[0m[37;40mnpm[0m [0m[31;40mERR![0m [0m[35mcommand[0m sh -c npm run unsafe-dev
[0m
[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m A complete log of this run can be found in:
[0m[37;40mnpm[0m [0m[31;40mERR![0m[35m[0m     /home/gitpod/.npm/_logs/2021-05-31T00_44_34_859Z-debug.log
[0mRETURN { value: [32m'""'[39m, uniqid: [33m28[39m }
deepgraph { token: [32m''[39m }
memooptions {
  memoOptions: {
    client: [32m'deepgraph-app'[39m,
    path: [32m'8080-salmon-basilisk-e0s2p7z9.ws-eu08.gitpod.io/v1/graphql'[39m,
    ssl: [33mtrue[39m,
    ws: [33mfalse[39m,
    token: [32m''[39m
  },
  token: [32m''[39m
}
RETURN { value: [32m'""'[39m, uniqid: [33m29[39m }
RETURN { value: [32m'""'[39m, uniqid: [33m30[39m }
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
[36mwait[39m  - compiling...
[35mevent[39m - compiled successfully
